// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  gender        Gender?
  weight        Float?
  height        Float?
  bodyType      BodyType?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  healthGoals   HealthGoal[]
  supplements   Supplement[]
  medications   Medication[]
  healthLogs    HealthLog[]
  foodLogs      FoodLog[]
  exerciseLogs  ExerciseLog[]
  subscription  Subscription?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model HealthGoal {
  id          String   @id @default(cuid())
  userId      String
  name        String
  category    String
  currentRating Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  healthLogs  HealthLog[]
}

model Supplement {
  id          String   @id @default(cuid())
  userId      String
  name        String
  dosage      String
  timing      String[]
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Medication {
  id          String   @id @default(cuid())
  userId      String
  name        String
  dosage      String
  timing      String[]
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model HealthLog {
  id          String   @id @default(cuid())
  userId      String
  goalId      String
  rating      Int
  notes       String?
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  goal        HealthGoal @relation(fields: [goalId], references: [id], onDelete: Cascade)
}

model FoodLog {
  id          String   @id @default(cuid())
  userId      String
  name        String
  imageUrl    String?
  description String?
  nutrients   Json?
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ExerciseLog {
  id          String   @id @default(cuid())
  userId      String
  type        String
  duration    Int
  intensity   String?
  notes       String?
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Subscription {
  id          String   @id @default(cuid())
  userId      String   @unique
  plan        Plan     @default(FREE)
  startDate   DateTime @default(now())
  endDate     DateTime?
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Gender {
  MALE
  FEMALE
}

enum BodyType {
  ECTOMORPH
  MESOMORPH
  ENDOMORPH
}

enum Plan {
  FREE
  PREMIUM
} 