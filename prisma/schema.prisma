generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(cuid())
  email             String    @unique
  emailVerified     DateTime?
  name              String?
  image             String?
  gender            Gender?
  weight            Float?
  height            Float?
  bodyType          BodyType?
  exerciseFrequency String?
  exerciseTypes     String[]
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  healthGoals   HealthGoal[]
  supplements   Supplement[]
  medications   Medication[]
  healthLogs    HealthLog[]
  foodLogs      FoodLog[]
  exerciseLogs  ExerciseLog[]
  subscription  Subscription?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model HealthGoal {
  id            String      @id @default(cuid())
  userId        String
  name          String
  category      String
  currentRating Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  healthLogs    HealthLog[]
}

model Supplement {
  id        String   @id @default(cuid())
  userId    String
  name      String
  dosage    String
  timing    String[]
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Medication {
  id        String   @id @default(cuid())
  userId    String
  name      String
  dosage    String
  timing    String[]
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model HealthLog {
  id        String     @id @default(cuid())
  userId    String
  goalId    String
  rating    Int
  notes     String?
  createdAt DateTime   @default(now())
  goal      HealthGoal @relation(fields: [goalId], references: [id], onDelete: Cascade)
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model FoodLog {
  id          String   @id @default(cuid())
  userId      String
  name        String
  imageUrl    String?
  description String?
  nutrients   Json?
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ExerciseLog {
  id        String   @id @default(cuid())
  userId    String
  type      String
  duration  Int
  intensity String?
  notes     String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Subscription {
  id        String    @id @default(cuid())
  userId    String    @unique
  plan      Plan      @default(FREE)
  startDate DateTime  @default(now())
  endDate   DateTime?
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Gender {
  MALE
  FEMALE
}

enum BodyType {
  ECTOMORPH
  MESOMORPH
  ENDOMORPH
}

enum Plan {
  FREE
  PREMIUM
}

model Waitlist {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  createdAt DateTime @default(now())
}

model AdminUser {
  id           String      @id @default(cuid())
  email        String      @unique
  password     String      // Hashed password
  name         String
  role         AdminRole   @default(ADMIN)
  isActive     Boolean     @default(true)
  lastLogin    DateTime?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  createdBy    String?     // ID of admin who created this user
}

enum AdminRole {
  SUPER_ADMIN
  ADMIN
  MODERATOR
}

model EmailTemplate {
  id          String            @id @default(cuid())
  name        String            // Display name (e.g., "Welcome New Users")
  category    EmailCategory     @default(MARKETING)
  subject     String            // Email subject line
  content     String            // Email body content
  isActive    Boolean           @default(true)
  isBuiltIn   Boolean           @default(false) // True for system templates, false for custom
  createdBy   String?           // Admin user ID who created it
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

enum EmailCategory {
  ONBOARDING
  MARKETING
  SUPPORT
  ANNOUNCEMENTS
  RETENTION
  CUSTOM
}
