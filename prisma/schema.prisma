generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(cuid())
  email             String    @unique
  emailVerified     DateTime?
  name              String?
  image             String?
  gender            Gender?
  weight            Float?
  height            Float?
  bodyType          BodyType?
  exerciseFrequency String?
  exerciseTypes     String[]
  // Credit system fields
  dailyAnalysisCredits     Int @default(3)  // Free: 3, Premium: 30
  additionalCredits        Int @default(0)  // Purchased credits that don't expire
  lastAnalysisResetDate    DateTime?        // Track daily reset
  lastMonthlyResetDate     DateTime?        // Track monthly reset for monthly quotas
  totalAnalysisCount       Int @default(0)  // Lifetime usage counter
  dailyAnalysisUsed        Int @default(0)  // Used today
  
  // Feature-specific credit tracking
  dailyFoodAnalysisUsed      Int @default(0)  // Food analysis credits used today
  dailyFoodReanalysisUsed    Int @default(0)  // Food re-analysis used today
  dailyMedicalAnalysisUsed   Int @default(0)  // Medical image analyses used today
  dailyInteractionAnalysisUsed Int @default(0)  // Interaction analysis credits used today
  totalFoodAnalysisCount     Int @default(0)  // Lifetime food analysis count
  totalInteractionAnalysisCount Int @default(0)  // Lifetime interaction analysis count
  monthlyInteractionAnalysisUsed Int @default(0) // Monthly interactions used (premium)

  // Trial fields
  trialActive                 Boolean @default(true)
  trialFoodRemaining          Int     @default(3)  // 3 food photos total
  trialInteractionRemaining   Int     @default(1)  // 1 interaction total
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  healthGoals   HealthGoal[]
  supplements   Supplement[]
  medications   Medication[]
  healthLogs    HealthLog[]
  foodLogs      FoodLog[]
  exerciseLogs  ExerciseLog[]
  subscription  Subscription?
  supportTickets SupportTicket[]
  interactionAnalyses InteractionAnalysis[]
  
  // File relationships (PHASE 2 addition)
  uploadedFiles File[]     @relation("UploadedFiles")
  profileImages File[]     @relation("ProfileImages")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model HealthGoal {
  id            String      @id @default(cuid())
  userId        String
  name          String
  category      String
  currentRating Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  healthLogs    HealthLog[]
}

model Supplement {
  id        String   @id @default(cuid())
  userId    String
  name      String
  dosage    String
  timing    String[]
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // File relationships (PHASE 2 addition)
  images    File[]   @relation("SupplementImages")
}

model Medication {
  id        String   @id @default(cuid())
  userId    String
  name      String
  dosage    String
  timing    String[]
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // File relationships (PHASE 2 addition)
  images    File[]   @relation("MedicationImages")
}

model HealthLog {
  id        String     @id @default(cuid())
  userId    String
  goalId    String
  rating    Int
  notes     String?
  createdAt DateTime   @default(now())
  goal      HealthGoal @relation(fields: [goalId], references: [id], onDelete: Cascade)
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model FoodLog {
  id          String   @id @default(cuid())
  userId      String
  name        String
  imageUrl    String?
  description String?
  nutrients   Json?
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // File relationships (PHASE 2 addition)
  images      File[]   @relation("FoodLogImages")
}

model ExerciseLog {
  id        String   @id @default(cuid())
  userId    String
  type      String
  duration  Int
  intensity String?
  notes     String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Subscription {
  id        String    @id @default(cuid())
  userId    String    @unique
  plan      Plan      @default(FREE)
  startDate DateTime  @default(now())
  endDate   DateTime?
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Gender {
  MALE
  FEMALE
}

enum BodyType {
  ECTOMORPH
  MESOMORPH
  ENDOMORPH
}

enum Plan {
  FREE
  PREMIUM
}

model Waitlist {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  createdAt DateTime @default(now())
}

model AdminUser {
  id           String      @id @default(cuid())
  email        String      @unique
  password     String      // Hashed password
  name         String
  role         AdminRole   @default(ADMIN)
  isActive     Boolean     @default(true)
  lastLogin    DateTime?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  createdBy    String?     // ID of admin who created this user
  
  // Support ticket relations
  assignedTickets    SupportTicket[]  @relation("AssignedTickets")
  ticketResponses    TicketResponse[] @relation("TicketResponses")
}

enum AdminRole {
  SUPER_ADMIN
  ADMIN
  MODERATOR
}

model EmailTemplate {
  id          String            @id @default(cuid())
  name        String            // Display name (e.g., "Welcome New Users")
  category    EmailCategory     @default(MARKETING)
  subject     String            // Email subject line
  content     String            // Email body content
  isActive    Boolean           @default(true)
  isBuiltIn   Boolean           @default(false) // True for system templates, false for custom
  createdBy   String?           // Admin user ID who created it
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

enum EmailCategory {
  ONBOARDING
  MARKETING
  SUPPORT
  ANNOUNCEMENTS
  RETENTION
  CUSTOM
}

model SupportTicket {
  id                  String            @id @default(cuid())
  subject             String
  message             String
  userEmail           String
  userName            String?
  userId              String?           // Optional link to registered user
  status              TicketStatus      @default(OPEN)
  priority            TicketPriority    @default(MEDIUM)
  category            TicketCategory    @default(GENERAL)
  externalMessageId   String?           // For email threading
  assignedAdminId     String?
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  
  // Relations
  user                User?             @relation(fields: [userId], references: [id], onDelete: SetNull)
  assignedAdmin       AdminUser?        @relation("AssignedTickets", fields: [assignedAdminId], references: [id], onDelete: SetNull)
  responses           TicketResponse[]
}

model TicketResponse {
  id              String      @id @default(cuid())
  ticketId        String
  message         String
  isAdminResponse Boolean     @default(false)
  adminId         String?     // If admin response
  userEmail       String?     // If user response (for non-registered users)
  createdAt       DateTime    @default(now())
  
  // Relations
  ticket          SupportTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  admin           AdminUser?    @relation("TicketResponses", fields: [adminId], references: [id], onDelete: SetNull)
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  AWAITING_RESPONSE
  RESPONDED
  RESOLVED
  CLOSED
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TicketCategory {
  GENERAL
  TECHNICAL
  BILLING
  ACCOUNT
  FEATURE_REQUEST
  BUG_REPORT
  EMAIL
}

// File Management System - PHASE 2 ADDITION
model File {
  id              String      @id @default(cuid())
  originalName    String      // Original filename from user
  fileName        String      // Processed filename
  fileSize        Int         // File size in bytes
  mimeType        String      // File MIME type (image/jpeg, etc.)
  cloudinaryId    String      // Cloudinary public_id
  cloudinaryUrl   String      // Full Cloudinary URL
  secureUrl       String      // Secure HTTPS Cloudinary URL
  uploadedById    String      // User who uploaded it
  fileType        FileType    @default(IMAGE)
  usage           FileUsage   @default(OTHER)
  metadata        Json?       // Additional file metadata
  isPublic        Boolean     @default(false)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Relations
  uploadedBy      User        @relation("UploadedFiles", fields: [uploadedById], references: [id], onDelete: Cascade)

  // Optional relationships to existing models (for future use)
  profileUsers    User[]      @relation("ProfileImages")
  supplementFiles Supplement[] @relation("SupplementImages") 
  medicationFiles Medication[] @relation("MedicationImages")
  foodLogFiles    FoodLog[]   @relation("FoodLogImages")
}

enum FileType {
  IMAGE
  DOCUMENT
  VIDEO
  AUDIO
  OTHER
}

enum FileUsage {
  PROFILE_IMAGE
  FOOD_PHOTO
  SUPPLEMENT_IMAGE
  MEDICATION_IMAGE
  DOCUMENT
  OTHER
}

model InteractionAnalysis {
  id                    String   @id @default(cuid())
  userId                String
  analysisName          String   // User-friendly name for the analysis
  overallRisk           String   // low, medium, high
  supplementCount       Int      @default(0)
  medicationCount       Int      @default(0)
  analysisData          Json     // Full analysis results (interactions, recommendations, etc.)
  supplementsAnalyzed   Json     // Array of supplements that were analyzed
  medicationsAnalyzed   Json     // Array of medications that were analyzed
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  // Relations
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, createdAt])
}
